<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.MusicMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.model.Music">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="song_id" jdbcType="VARCHAR" property="songId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="album" jdbcType="VARCHAR" property="album" />
    <result column="song_url" jdbcType="VARCHAR" property="songUrl" />
    <result column="comment_count" jdbcType="INTEGER" property="commentCount" />
  </resultMap>
  <sql id="Base_Column_List">
    id, song_id, title, author, album, song_url, comment_count
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from music
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from music
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.Music">
    insert into music (song_id, title,
      author, album, song_url, 
      comment_count)
    values (#{songId,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR},
      #{author,jdbcType=VARCHAR}, #{album,jdbcType=VARCHAR}, #{songUrl,jdbcType=VARCHAR}, 
      #{commentCount,jdbcType=INTEGER})
  </insert>
  <insert id="insertBatch" parameterType="java.util.List">
    insert into music (song_id, title, author, album, song_url, comment_count)
    values
     <foreach collection="list" item="item" index="index" separator=",">
     (#{item.songId,jdbcType=INTEGER}, #{item.title,jdbcType=VARCHAR},
       #{item.author,jdbcType=VARCHAR}, #{item.album,jdbcType=VARCHAR}, #{item.songUrl,jdbcType=VARCHAR},
       #{item.commentCount,jdbcType=INTEGER})
      </foreach>
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.Music">
    insert into music
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="songId != null">
        song_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="album != null">
        album,
      </if>
      <if test="songUrl != null">
        song_url,
      </if>
      <if test="commentCount != null">
        comment_count,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="songId != null">
        #{songId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="album != null">
        #{album,jdbcType=VARCHAR},
      </if>
      <if test="songUrl != null">
        #{songUrl,jdbcType=VARCHAR},
      </if>
      <if test="commentCount != null">
        #{commentCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.Music">
    update music
    <set>
      <if test="songId != null">
        song_id = #{songId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="album != null">
        album = #{album,jdbcType=VARCHAR},
      </if>
      <if test="songUrl != null">
        song_url = #{songUrl,jdbcType=VARCHAR},
      </if>
      <if test="commentCount != null">
        comment_count = #{commentCount,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.Music">
    update music
    set song_id = #{songId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      album = #{album,jdbcType=VARCHAR},
      song_url = #{songUrl,jdbcType=VARCHAR},
      comment_count = #{commentCount,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>